/// @license Propriety <http://license.url>
/// @copyright Copyright (C) Turbo Labz 2016 - All rights reserved
/// Unauthorized copying of this file, via any medium is strictly prohibited
/// Proprietary and confidential
/// 
/// @author Mubeen Iqbal <mubeen@turbolabz.com>
/// @company Turbo Labz <http://turbolabz.com>
/// @date 2016-09-07 16:38:23 UTC+05:00
/// 
/// @description
/// 

using UnityEngine;

using strange.extensions.context.api;
using strange.extensions.context.impl;

using TurboLabz.Chess;
using TurboLabz.Common;

namespace TurboLabz.Gamebet
{
    public class GamebetContext : MVCSContext
    {
        public GamebetContext(MonoBehaviour view) : base(view)
        {
        }

        public GamebetContext(MonoBehaviour view, ContextStartupFlags flags) : base(view, flags)
        {
        }
        
        // Override Start so that we can fire the StartSignal.
        public override IContext Start()
        {
            base.Start();
            StartSignal startSignal = injectionBinder.GetInstance<StartSignal>();
            startSignal.Dispatch();
            return this;
        }

        // TODO: Organize the order and comments for the bindings
        protected override void mapBindings()
        {
            // We are not using any implicit bindings at the moment, hence this code is commented.
            // Scan namespaces for implicit binding
            // implicitBinder.ScanForAnnotatedClasses("TurboLabz");

            // Bind signals to commands
            commandBinder.Bind<StartSignal>().To<StartCommand>().Once();
            commandBinder.Bind<BootSignal>().To<BootCommand>().Once();

            commandBinder.Bind<LoadViewSignal>().To<LoadViewCommand>();
            commandBinder.Bind<LoadPreviousViewSignal>().To<LoadPreviousViewCommand>();

            commandBinder.Bind<LoadModalViewSignal>().To<LoadModalViewCommand>();
            commandBinder.Bind<CloseModalViewSignal>().To<CloseModalViewCommand>();

            commandBinder.Bind<AuthGuestSignal>().To<AuthGuestCommand>();
            commandBinder.Bind<AuthFacebookSignal>().To<AuthFacebookCommand>();
            commandBinder.Bind<ConnectBackendSignal>().To<ConnectBackendCommand>();
            commandBinder.Bind<BackendErrorSignal>().To<BackendErrorCommand>();
            commandBinder.Bind<ClockSyncedSignal>().To<ReceptionCommand>();
            commandBinder.Bind<DisconnectBackendSignal>().To<DisconnectBackendCommand>();
            commandBinder.Bind<FindMatchSignal>().To<MatchmakingCommand>();
            commandBinder.Bind<GetGameStartTimeSignal>().To<GetGameStartTimeCommand>();
            commandBinder.Bind<StartGameSignal>().To<StartGameCommand>();
            commandBinder.Bind<AppEventSignal>().To<AppEventCommand>();
            commandBinder.Bind<UpdateAppSignal>().To<UpdateAppCommand>();
            commandBinder.Bind<LoadLobbySignal>().To<LoadLobbyCommand>();
            commandBinder.Bind<SetPlayerSocialNameSignal>().To<SetPlayerSocialNameCommand>();
            commandBinder.Bind<LoadPlayerProfileSignal>().To<LoadPlayerProfileCommand>();
            commandBinder.Bind<LoadRoomsSignal>().To<LoadRoomsCommand>();
            commandBinder.Bind<LoadShopSignal>().To<LoadShopCommand>();
            commandBinder.Bind<GameAppEventSignal>().To<GameAppEventCommand>(); // TODO(mubeeniqbal): Verify and move to Game mappings.
            commandBinder.Bind<GetPlayerProfilePictureSignal>().To<GetPlayerProfilePictureCommand>();
            commandBinder.Bind<GetOpponentProfilePictureSignal>().To<GetOpponentProfilePictureCommand>();
            commandBinder.Bind<LoadEndGameSignal>().To<EndGameCommand>();
            commandBinder.Bind<LoadFreeCurrency1ModalSignal>().To<LoadFreeCurrency1ModalCommand>();
            commandBinder.Bind<PlayAdSignal>().To<PlayAdCommand>();

            // Bind signals for dispatching to mediators
            injectionBinder.Bind<HideViewSignal>().ToSingleton();
            injectionBinder.Bind<ShowViewSignal>().ToSingleton();
            injectionBinder.Bind<HideModalViewSignal>().ToSingleton();
            injectionBinder.Bind<ShowModalViewSignal>().ToSingleton();
            injectionBinder.Bind<UpdateRetryConnectionMessageSignal>().ToSingleton();
            injectionBinder.Bind<UpdateLobbyViewSignal>().ToSingleton();
            injectionBinder.Bind<UpdatePlayerProfilePictureSignal>().ToSingleton();
            injectionBinder.Bind<UpdateOpponentProfilePictureSignal>().ToSingleton();
            injectionBinder.Bind<UpdateMatchmakingViewPreMatchFoundSignal>().ToSingleton();
            injectionBinder.Bind<UpdateMatchmakingViewPostMatchFoundSignal>().ToSingleton();
            injectionBinder.Bind<UpdateSetPlayerSocialNameViewSignal>().ToSingleton();
            injectionBinder.Bind<UpdatePlayerProfileViewSignal>().ToSingleton();
            injectionBinder.Bind<UpdateRoomsViewSignal>().ToSingleton();
            injectionBinder.Bind<UpdateEndGameViewSignal>().ToSingleton();

            injectionBinder.Bind<UpdateFreeCurrency1ModalViewSignal>().ToSingleton();
            injectionBinder.Bind<UpdateOutOfCurrency1ModalViewSignal>().ToSingleton();
            injectionBinder.Bind<UpdateCurrency1RewardModalViewSignal>().ToSingleton();
            injectionBinder.Bind<UpdateCurrency1RewardModalViewShowWaitForRewardSignal>().ToSingleton();

            // Bind views to mediators
            mediationBinder.Bind<SplashView>().To<SplashMediator>();
            mediationBinder.Bind<LoadingView>().To<LoadingMediator>();
            mediationBinder.Bind<AuthView>().To<AuthMediator>();
            mediationBinder.Bind<RetryConnectionView>().To<RetryConnectionMediator>();
            mediationBinder.Bind<LobbyView>().To<LobbyMediator>();
            mediationBinder.Bind<AppEventView>().To<AppEventMediator>();
            mediationBinder.Bind<MatchmakingView>().To<MatchmakingMediator>();
            mediationBinder.Bind<EndGameView>().To<EndGameMediator>();
            mediationBinder.Bind<SetPlayerSocialNameView>().To<SetPlayerSocialNameMediator>();
            mediationBinder.Bind<PlayerProfileView>().To<PlayerProfileMediator>();
            mediationBinder.Bind<RoomsView>().To<RoomsMediator>();
            mediationBinder.Bind<ShopView>().To<ShopMediator>();
            mediationBinder.Bind<UpdateAppView>().To<UpdateAppMediator>();

            mediationBinder.Bind<FreeCurrency1ModalView>().To<FreeCurrency1ModalMediator>();
            mediationBinder.Bind<OutOfCurrency1ModalView>().To<OutOfCurrency1ModalMediator>();
            mediationBinder.Bind<Currency1RewardModalView>().To<Currency1RewardModalMediator>();

            // Bind services
            injectionBinder.Bind<IBackendService>().To<GSService>().ToSingleton();
            injectionBinder.Bind<IFacebookService>().To<FBService>().ToSingleton();
            injectionBinder.Bind<ILocalizationService>().To<LocalizationService>().ToSingleton();
            injectionBinder.Bind<IAdsService>().To<UnityAdsService>().ToSingleton();

            // Bind models
            injectionBinder.Bind<IViewStateModel>().To<ViewStateModel>().ToSingleton();
            injectionBinder.Bind <IModalViewStateModel>().To<ModalViewStateModel>().ToSingleton();
            injectionBinder.Bind<IPlayerModel>().To<PlayerModel>().ToSingleton();
            injectionBinder.Bind<IMatchInfoModel>().To<MatchInfoModel>().ToSingleton();
            injectionBinder.Bind<IAppEventModel>().To<AppEventModel>().ToSingleton();
            injectionBinder.Bind<ILeagueSettingsModel>().To<LeagueSettingsModel>().ToSingleton();
            injectionBinder.Bind<ILevelSettingsModel>().To<LevelSettingsModel>().ToSingleton();
            injectionBinder.Bind<IRoomSettingsModel>().To<RoomSettingsModel>().ToSingleton();
            injectionBinder.Bind<ITitleSettingsModel>().To<TitleSettingsModel>().ToSingleton();
            injectionBinder.Bind<IShopSettingsModel>().To<ShopSettingsModel>().ToSingleton();
            injectionBinder.Bind<IPromotionsModel>().To<PromotionsModel>().ToSingleton();
<<<<<<< Updated upstream
            injectionBinder.Bind<IAdRewardModel>().To<AdRewardModel>().ToSingleton();
=======
            injectionBinder.Bind<IAppInfoModel>().To<AppInfoModel>().ToSingleton();
>>>>>>> Stashed changes

            // Bind utils
            injectionBinder.Bind<IRoutineRunner>().To<StrangeRoutineRunner>().ToSingleton();
            injectionBinder.Bind<IGameEngineInfo>().To<UnityInfo>().ToSingleton();
            injectionBinder.Bind<IServerClock>().To<ServerClock>().ToSingleton();
            injectionBinder.Bind<ITimeControl>().To<TimeControl>(); // Not singleton

            MapGameBindings();
        }

        // TODO: move this to the game folder
        private void MapGameBindings()
        {
            // Bind signals to commands
            commandBinder.Bind<RunTimeControlSignal>().To<RunTimeControlCommand>();
            commandBinder.Bind<ClaimFiftyMoveDrawSignal>().To<ClaimFiftyMoveDrawCommand>();
            commandBinder.Bind<ClaimThreefoldRepeatDrawSignal>().To<ClaimThreefoldRepeatDrawCommand>();
            commandBinder.Bind<ResignSignal>().To<ResignCommand>();
            commandBinder.Bind<AiTurnSignal>().To<AiTurnCommand>();
            commandBinder.Bind<ChessboardEventSignal>().To<ChessboardCommand>();
            commandBinder.Bind<SquareClickedSignal>().To<ChessboardSquareClickedCommand>();
            commandBinder.Bind<PromoSelectedSignal>().To<ChessboardPromoCommand>();
            commandBinder.Bind<BackendPlayerTurnSignal>().To<PlayerTurnCommand>();

            // Bind views to mediators
            mediationBinder.Bind<GameView>().To<GameMediator>();

            // Bind signals for dispatching to/from mediators
            injectionBinder.Bind<SetupChessboardSignal>().ToSingleton();
            injectionBinder.Bind<UpdateMatchInfoSignal>().ToSingleton();
            injectionBinder.Bind<InitTimersSignal>().ToSingleton();
            injectionBinder.Bind<UpdatePlayerTimerSignal>().ToSingleton();
            injectionBinder.Bind<UpdateOpponentTimerSignal>().ToSingleton();
            injectionBinder.Bind<PlayerTimerExpiredSignal>().ToSingleton();
            injectionBinder.Bind<OpponentTimerExpiredSignal>().ToSingleton();
            injectionBinder.Bind<ShowResultsDialogSignal>().ToSingleton();
            injectionBinder.Bind<ShowPossibleMovesSignal>().ToSingleton();
            injectionBinder.Bind<HidePossibleMovesSignal>().ToSingleton();
            injectionBinder.Bind<UpdateChessboardSignal>().ToSingleton();
            injectionBinder.Bind<UpdatePlayerMoveSignal>().ToSingleton();
            injectionBinder.Bind<UpdatePlayerPrePromoMoveSignal>().ToSingleton();
            injectionBinder.Bind<UpdateOpponentMoveSignal>().ToSingleton();
            injectionBinder.Bind<ShowPlayerFromIndicatorSignal>().ToSingleton();
            injectionBinder.Bind<ShowPlayerToIndicatorSignal>().ToSingleton();
            injectionBinder.Bind<HidePlayerFromIndicatorSignal>().ToSingleton();
            injectionBinder.Bind<HidePlayerToIndicatorSignal>().ToSingleton();
            injectionBinder.Bind<ShowOpponentFromIndicatorSignal>().ToSingleton();
            injectionBinder.Bind<ShowOpponentToIndicatorSignal>().ToSingleton();
            injectionBinder.Bind<HideOpponentFromIndicatorSignal>().ToSingleton();
            injectionBinder.Bind<HideOpponentToIndicatorSignal>().ToSingleton();
            injectionBinder.Bind<ShowPromoDialogSignal>().ToSingleton();
            injectionBinder.Bind<HidePromoDialogSignal>().ToSingleton();
            injectionBinder.Bind<UpdatePromoSignal>().ToSingleton();
            injectionBinder.Bind<ShowFiftyMoveDrawDialogSignal>().ToSingleton();
            injectionBinder.Bind<ShowThreefoldRepeatDrawDialogSignal>().ToSingleton();
            injectionBinder.Bind<HideDrawDialogSignal>().ToSingleton();
            injectionBinder.Bind<OpponentDisconnectedSignal>().ToSingleton();
            injectionBinder.Bind<OpponentReconnectedSignal>().ToSingleton();
            injectionBinder.Bind<DisplayPlayerTurnSignal>().ToSingleton();
            injectionBinder.Bind<UpdateMoveForResumeSignal>().ToSingleton();

            // Bind signals for dipatching from command to command
            injectionBinder.Bind<TakeTurnSwapTimeControlSignal>().ToSingleton();
            injectionBinder.Bind<ReceiveTurnSwapTimeControlSignal>().ToSingleton();
            injectionBinder.Bind<StopTimersSignal>().ToSingleton();

            // Bind services
            injectionBinder.Bind<IChessService>().To<ChessService>().ToSingleton();
            injectionBinder.Bind<IChessAiService>().To<ChessAiService>().ToSingleton();

            // Bind models
            injectionBinder.Bind<IChessboardModel>().To<ChessboardModel>().ToSingleton();
        }
    }
}
