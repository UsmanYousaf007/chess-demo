@startuml

class HAds << static >>
{
    + HBanner banner { get; }
    + HInterstitial interstitial { get; }
    + HRewarded rewarded { get; }
    + IAdsService service { get; }

    + void SetConsent(bool consentStatus)
}

class HBanner << static >>
{
    + event OnShown<IBannerCallbackData>
    + event OnFailed<IBannerCallbackData>
    + event OnClicked<IBannerCallbackData>
    
    + void RegisterAdProvider(IBannerAdProvider)
    + bool Show(string placementId)
    + bool Show()
    + void Hide()
    + string GetAdProviderName()
}

class HInterstitial << static >>
{
    + event OnEnded<IAdCallbackData>
    + event OnClicked<IAdCallbackData>
    + event OnFetched<IAdCallbackData>
    
    + void RegisterAdProvider(IInterstitialAdProvider)
    + bool TryShow(string placementId)
    + bool TryShow()
    + bool IsReady(string placementId)
    + bool IsReady()
    + void Fetch(string placementId)
    + void Fetch()
    + string GetAdProviderName()
}

class HRewarded << static >>
{
    + event OnEnded<IAdCallbackData>
    + event OnClicked<IAdCallbackData>
    + event OnFetched<IAdCallbackData>
    
    + void RegisterAdProvider(IRewardedAdProvider)
    + bool TryShow(string placementId)
    + bool TryShow()
    + bool IsReady(string placementId)
    + bool IsReady()
    + void Fetch(string placementId)
    + void Fetch()
    + string GetAdProviderName()
}

node "BlackBox" {
    interface IAdsProviderConfig
    {
        string AppId { get; }
        List<AdPlacementData> { get; }
    }
    
    interface IAdsService
    {
        IInterstitialAdProvider InterstitialAdProvider { get; }
        IRewardedAdProvider RewardedAdProvider { get; }
        IBannerAdProvider BannerAdProvider { get; }
    
        void SetConsent(bool consentStatus)
        
        bool TryShowInterstitial(string placementId)
        bool TryShowInterstitial()
        bool IsInterstitialReady(string placementId)
        bool IsInterstitialReady()
        void FetchInterstitial(string placementId)
        void FetchInterstitial()
        
        bool TryShowRewarded(string placementId)
        bool TryShowRewarded()
        bool IsRewardedReady(string placementId)
        bool IsRewardedReady()
        void FetchRewarded(string placementId)
        void FetchRewarded()
        
        bool ShowBanner(string placementId)
        bool ShowBanner()
        void HideBanner()
    }
    
    interface IInterstitialAdProvider
    {
        string ProviderId { get; }
        
        event OnInterstitialEnded<IAdCallbackData>
        event OnInterstitialFetched<IAdCallbackData>
        event OnInterstitialClicked<IAdCallbackData>
        
        bool Init()
        void SetConsent(bool consentStatus)
        
        bool Show(string placementId)
        bool Show()
        bool IsReady(string placementId)
        bool IsReady()
        void Fetch(string placementId)
        void Fetch()
    }
    
    interface IRewardedAdProvider
    {
        string ProviderId { get; }
    
        event OnRewardedEnded<IAdCallbackData>
        event OnRewardedFetched<IAdCallbackData>
        event OnRewardedClicked<IAdCallbackData>
    
        bool Init()
        void SetConsent(bool consentStatus)
    
        bool Show(string placementId)
        bool Show()
        bool IsReady(string placementId)
        bool IsReady()
        void Fetch(string placementId)
        void Fetch()
    }
    
    interface IBannerAdProvider
    {
        string ProviderId { get; }
    
        event OnBannerShown<IBannerCallbackData>
        event OnBannerHidden<IBannerCallbackData>
        event OnBannerClicked<IBannerCallbackData>
    
        bool Init()
        void SetConsent(bool consentStatus)
        
        bool Show(string placementId)
        bool Show()
        void Hide()
    }
    
    enum AdResult
    {
        Completed
        Skipped
        Failed
    }
    
    enum PlacementType
    {
        Banner
        Interstitial
        Rewarded
    }
    
    class AdPlacementData << Serializable >>
    {
        + string AppId { get; }
        + string PlacementId;
        + string PlacementType;
        - ApplicationIdentifier appId;
    }
    
    class ApplicationIdentifier
    {
        + string Value { get; }
        - string iOSAppId;
        - string androidId;
    }
    
    interface IBannerCallbackData
    {
        string ProviderId { get; }
        float Height { get; }
    }
    
    interface IAdCallbackData
    {
        string ProviderId { get; }
        string PlacementId { get; }
        VideoAdResult Result { get; }
    }
}

HAds *-- HBanner
HAds *-- HInterstitial
HAds *-- HRewarded

HBanner *-- IAdsService
HInterstitial *-- IAdsService
HRewarded *-- IAdsService

IAdCallbackData -up-> IInterstitialAdProvider : use
IAdCallbackData -up-> IRewardedAdProvider : use
IBannerCallbackData -up-> IBannerAdProvider : use

IAdsService <.. HRewarded : use
IAdsService <.. HInterstitial : use
IAdsService <.. HBanner : use

IAdCallbackData <.. AdResult

IInterstitialAdProvider -down-* IAdsService
IRewardedAdProvider -down-* IAdsService
IBannerAdProvider -down-* IAdsService

IAdsProviderConfig <-- AdPlacementData
AdPlacementData *-- PlacementType
AdPlacementData *-- ApplicationIdentifier

@enduml
